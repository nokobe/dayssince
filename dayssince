#!/usr/bin/perl
use strict;

# Mark Bates
# Version 3.0
# June 2018

use Date::Calc qw/Today Delta_Days Add_Delta_Days/;

die "Usage: $0 {-n|+n|dd/mm/yy[yy]} [-n|+n|dd/mm/[yy]]\n" unless @ARGV >= 1;

my ($action, $arg1, $arg2) = &processArgs(@ARGV);
&performAction($action, $arg1, $arg2);
exit 0;

# interface
# given DATE, OFFSET => Calculate new date
# given DATE, DATE   => Calculate datediff (n days difference between dates)

sub performAction {
	my ($action, $arg1, $arg2) = @_;

	if ($action eq 'todayPlusOffset') {
		printlnDate( datePlusOffset(makeMydate(Today()), $arg1) );
	} elsif ($action eq 'date') {
		print dateDate( parseDateWithDefault($arg1), makeMydate(Today()) ), "\n";
	} elsif ($action eq 'datePlusOffset') {
		printlnDate( datePlusOffset( datePlusOffset( parseDateWithDefault($arg1), $arg2 ) ) );
	} elsif ($action eq 'dateDate') {
		print dateDate( parseDateWithDefault($arg1),parseDateWithDefault($arg2) ), "\n";
	} else {
		print "Error ($action): unknown action\n";
	}
}

sub processArgs {
	die "Usage\n" if @_ == 0;
	my ($arg1, $arg2) = @_;
	if ($arg1 =~ /^[+-]/) {
		$action = 'todayPlusOffset';
	} elsif ($arg2 =~ /^[+-]/) {
		$action = 'datePlusOffset';
	} else {
		if ($arg2 eq "") {
			$action = 'date';
		} else {
			$action = 'dateDate';
		}
	}
	return($action, $arg1, $arg2);
}


### MODEL ACTION ######################################################################################
#
# given DATE + OFFSET => Calculate new date
# given DATE + DATE   => Calculate datediff (n days difference between dates)

# returns: mydate
sub datePlusOffset {
	my ($mydate, $offset) = @_;

	return makeMydate(Add_Delta_Days(unpackMydate($mydate), $offset));
}

# returns: integer (n days difference b/n dates)
sub dateDate {
	my ($d1, $d2) = @_;

	return Delta_Days( unpackMydate($d1), unpackMydate($d2) );
}

# returns: mydate
sub makeMydate {
	my ($y, $m, $d) = @_;

	return {
		'day' => $d,
		'month' => $m,
		'year' => $y
	};
}

# returns: ({year}, {month}, {day})
sub unpackMydate {
	my $mydate = shift;

	return ($mydate->{'year'}, $mydate->{'month'}, $mydate->{'day'});
}

### HELPER ROUTINES ######################################################################################

# returns: mydate
sub parseDateWithDefault {
	my $arg = shift;
	my ($curryear, $currmonth, $currday) = Today();

	my ($d, $m, $y) = split /\//, $arg, 3;
	$y = $curryear unless $y;
	$m = $currmonth unless $m;

	return makeMydate($y, $m, $d);
}

sub printlnDate {
	my ($y, $m, $d) = unpackMydate(shift);

	print "$d/$m/$y\n";
}
