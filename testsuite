#!/bin/bash

FN="./dayssince"

# these are relative and will be have to be adjusted for each different day you want to run the tests
# These test relative dates. date(1) is used to determine what the correct output should be.

Q1="$(date +%d/%m)"		A1=0
Q2="$(date -v+1d +'%d/%m/%Y')"	A2=-1
Q3="$(date -v-1d +'%d/%m/%Y')"	A3=1
Q4="$(date -v+7d +'%d/%m/%Y')"	A4=-7
Q5="$(date -v-7d +'%d/%m/%Y')"	A5=7

# Tests 6 to 10 make incorrectly be reported as failures due to date(1) adding leading zero's

Q6="+1"			A6="$(date -v+1d +'%d/%m/%Y')"
Q7="-1"			A7="$(date -v-1d +'%d/%m/%Y')"
Q8="+7"			A8="$(date -v+7d +'%d/%m/%Y')"
Q9="+180"		A9="$(date -v+180d +'%d/%m/%Y')"
Q10="-30"		A10="$(date -v-30d +'%d/%m/%Y')"

# Static tests

Q11="1/9 +1"		A11="2/9/2018"
Q12="1/9 +10"		A12="11/9/2018"
Q13="1/9 -1"		A13="31/8/2018"
Q14="1/9 -10"		A14="22/8/2018"
Q15="9/1/2019 +30"	A15="8/2/2019"

Q16="11/8 8/11"		A16="89"
Q17="10/12 9/1"		A17="-335"
Q18="7/7/2018 8/7/2018"	A18="1"
Q19="6/6/2018 5/6/2018"	A19="-1"

LASTTEST=19
FAIL=0

onlyDigits() {
	for arg
	do
		case $arg in *[!-0-9]*) return 1;; esac
	done
	true
}

#usage: expect $a $b $failure_message
function expect {
	if onlyDigits "$1" "$2"; then
		if [ "$1" -ne "$2" ]; then
			echo "	FAIL: $3"
			let FAIL++
		fi
	else
		if [ "$1" != "$2" ]; then
			echo "	FAIL: $3"
			let FAIL++
		fi
	fi
}


for (( n=1 ; n <= $LASTTEST ; n++))
do
	question="$( eval echo \$Q$n )"
	answer="$( eval echo \$A$n )"
	result=$( $FN $question )
	expect "$result" "$answer" "Test $n: $FN $question GOT ==> $result EXPECTED ==> $answer"
done
if [ $FAIL -eq 0 ]; then
	echo ALL TESTS PASSED
fi
